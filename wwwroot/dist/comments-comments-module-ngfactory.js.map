{"version":3,"sources":["./src/app/comments/comments-edit/comments-edit.component.html","./src/app/comments/comments-edit/comments-edit.component.ts","./src/app/comments/comments-list/comments-list.component.html","./src/app/comments/comments-list/comments-list.component.ts","./src/app/comments/comments-routing.module.ts","./src/app/comments/comments.component.html","./src/app/comments/comments.component.ts","./src/app/comments/comments.module.ts","./src/app/comments/comments.service.ts"],"names":[],"mappings":"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","file":"comments-comments-module-ngfactory.js","sourcesContent":["<p>\r\n    Add/Edit comment\r\n</p>\r\n\r\n<mat-card class=\"example-card\">\r\n    <form *ngIf=\"formGroup\" [formGroup]=\"formGroup\">\r\n        <div class=\"example-container\">\r\n            <mat-form-field>\r\n                <input matInput placeholder=\"Text\" formControlName=\"text\" type=\"text\">\r\n\r\n                <mat-error *ngIf=\"formGroup.get('text').touched && formGroup.get('text').errors && formGroup.get('text').errors.required\">\r\n                    Text required!\r\n                </mat-error>\r\n            </mat-form-field>\r\n            \r\n            <mat-form-field>\r\n                <input matInput placeholder=\"MovieId\" formControlName=\"movieId\" type=\"number\">\r\n\r\n                <mat-error *ngIf=\"formGroup.get('movieId').touched && formGroup.get('movieId').errors && formGroup.get('movieId').errors.required\">\r\n                    Text required!\r\n                </mat-error>\r\n            </mat-form-field>\r\n\r\n        </div>\r\n        <div class=\"example-button-row\">\r\n            <button mat-raised-button color=\"primary\" (click)=\"save()\">Save</button>\r\n            <button mat-raised-button color=\"primary\" [routerLink]='routerLink'>Cancel</button>\r\n        </div>\r\n    </form>\r\n</mat-card>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { CommentsService } from '../comments.service';\r\nimport { Comment } from '../comments.models';\r\n\r\n@Component({\r\n    selector: 'app-comments-edit',\r\n    templateUrl: './comments-edit.component.html',\r\n    styleUrls: ['./comments-edit.component.css']\r\n})\r\nexport class CommentsEditComponent implements OnInit {\r\n\r\n    private routerLink: string = '../list';\r\n\r\n    private commentID: number;\r\n\r\n    private isEdit: boolean = false;\r\n\r\n    public formGroup: FormGroup;\r\n\r\n    constructor(\r\n        private router: Router,\r\n        private route: ActivatedRoute,\r\n        private commentsService: CommentsService,\r\n        private formBuilder: FormBuilder) { }\r\n\r\n    ngOnInit() {\r\n\r\n        this.commentID = parseInt(this.route.snapshot.params['id']);\r\n\r\n        if (this.commentID) {\r\n            this.routerLink = '../../list';\r\n\r\n            this.commentsService.getComment(this.commentID).subscribe(res => {\r\n                this.initForm(res);\r\n                this.isEdit = true;\r\n            });\r\n        }\r\n        else {\r\n            this.initForm(<Comment>{});\r\n        }\r\n    }\r\n\r\n    save() {\r\n        Object.keys(this.formGroup.controls).forEach(control => {\r\n            this.formGroup.get(control).markAsTouched();\r\n        });\r\n\r\n        if (this.formGroup.valid) {\r\n            let comment = this.formGroup.value as Comment;\r\n          \r\n\r\n            if (this.isEdit) {\r\n                comment.id = this.commentID;\r\n\r\n                this.commentsService.modifyComment(comment).subscribe(res => {\r\n                    this.router.navigate(['/comments']);\r\n                });\r\n            } else {\r\n\r\n                this.commentsService.saveComment(comment).subscribe(res => {\r\n                    this.router.navigate(['/comments']);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    initForm(comment: Comment) {\r\n        this.formGroup = this.formBuilder.group({\r\n            text: [comment.Text, Validators.required],\r\n           // important: [comment.Important, Validators.required],\r\n            movieId: [comment.MovieId, Validators.required]\r\n        });\r\n    }\r\n\r\n}\r\n","<h1>Comments</h1>\r\n\r\n<p>Many comments in the list</p>\r\n\r\n<div class=\"example-button-row\">\r\n    <button mat-raised-button [routerLink]='[\"../edit\"]' color=\"primary\">Add</button>\r\n</div>\r\n\r\n<table mat-table [dataSource]=\"comments\" class=\"mat-elevation-z8\">\r\n\r\n    <!--- Note that these columns can be defined in any order.\r\n          The actual rendered columns are set as a property on the row definition\" -->\r\n    <!-- Position Column -->\r\n    <ng-container matColumnDef=\"text\">\r\n        <th mat-header-cell *matHeaderCellDef style=\"width:21%\"> Text </th>\r\n        <td mat-cell *matCellDef=\"let comment\"> {{comment.text}} </td>\r\n    </ng-container>\r\n\r\n    <!-- Weight Column -->\r\n    <ng-container matColumnDef=\"movieId\">\r\n        <th mat-header-cell *matHeaderCellDef style=\"width:21%\"> Movie Id </th>\r\n        <td mat-cell *matCellDef=\"let comment\"> {{comment.movieId}} </td>\r\n    </ng-container>\r\n\r\n    <!-- Action Column -->\r\n    <ng-container matColumnDef=\"action\">\r\n        <th mat-header-cell *matHeaderCellDef style=\"width:10%\"> Action </th>\r\n        <td mat-cell *matCellDef=\"let comment\">\r\n            <button mat-icon-button matTooltip=\"Edit\" [matTooltipPosition]=\"'after'\">\r\n                <mat-icon aria-label=\"Example icon-button with a heart icon\" [routerLink]=\"['../edit', comment.id]\">edit</mat-icon>\r\n            </button>\r\n\r\n            <button mat-icon-button matTooltip=\"Delete\" [matTooltipPosition]=\"'after'\">\r\n                <mat-icon aria-label=\"Example icon-button with a heart icon \" (click)=\"deleteComment(comment)\">delete</mat-icon>\r\n            </button>\r\n        </td>\r\n    </ng-container>\r\n\r\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n</table>\r\n<mat-progress-bar mode=\"indeterminate\" *ngIf=\"!comments\"></mat-progress-bar>\r\n\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Comment } from '../comments.models';\r\nimport { CommentsService } from '../comments.service';\r\n\r\n@Component({\r\n    selector: 'app-comments-list',\r\n    templateUrl: './comments-list.component.html',\r\n    styleUrls: ['./comments-list.component.css']\r\n})\r\nexport class CommentsListComponent implements OnInit {\r\n\r\n\r\n    public displayedColumns: string[] = ['text', 'movieId', 'action'];\r\n    public comments: Comment[];\r\n\r\n    constructor(private commentsService: CommentsService) { }\r\n\r\n    ngOnInit() {\r\n        this.loadComments();\r\n    }\r\n\r\n    loadComments() {\r\n        this.commentsService.listComments().subscribe(res => {\r\n            this.comments = res;\r\n        });\r\n    }\r\n\r\n    deleteComment(comment: Comment) {\r\n        this.commentsService.deleteComment(comment.id).subscribe(x => {\r\n            this.loadComments();\r\n        });\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { CommentsComponent } from './comments.component';\r\nimport { CommentsEditComponent } from './comments-edit/comments-edit.component';\r\nimport { CommentsListComponent } from './comments-list/comments-list.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '', component: CommentsComponent,\r\n        children: [\r\n            { path: '', redirectTo: 'list', pathMatch: 'full' },\r\n            { path: 'list', component: CommentsListComponent },\r\n            { path: 'edit/:id', component: CommentsEditComponent },\r\n            { path: 'edit', component: CommentsEditComponent },\r\n        ]\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\n\r\nexport class CommentsRoutingModule {\r\n    static routedComponents = [CommentsComponent, CommentsListComponent, CommentsEditComponent];\r\n}\r\n","<router-outlet></router-outlet>\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-comments',\r\n    templateUrl: './comments.component.html',\r\n    styleUrls: ['./comments.component.css']\r\n})\r\nexport class CommentsComponent implements OnInit {\r\n\r\n    constructor() { }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { CoreModule } from '../core/core.module';\r\nimport { AngularMaterialModule } from '../shared/angular-material.module';\r\n\r\nimport { CommentsRoutingModule } from './comments-routing.module';\r\n\r\nimport { CommentsService } from './comments.service';\r\n\r\n@NgModule({\r\n    declarations: [CommentsRoutingModule.routedComponents],\r\n    imports: [\r\n        CommonModule,\r\n        CommentsRoutingModule,\r\n        AngularMaterialModule,\r\n        CoreModule,\r\n        FormsModule,\r\n        ReactiveFormsModule\r\n    ],\r\n    providers: [CommentsService],\r\n})\r\nexport class CommentsModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Comment } from './comments.models';\r\nimport { ApplicationService } from '../core/services/application.service';\r\n\r\n\r\n@Injectable()\r\nexport class CommentsService {\r\n\r\n    constructor(\r\n        private http: HttpClient,\r\n        private applicationService: ApplicationService) { }\r\n\r\n    getComment(id: number) {\r\n        return this.http.get<Comment>(`${this.applicationService.baseUrl}api/Comments/${id}`);\r\n    }\r\n\r\n    listComments() {\r\n        return this.http.get<Comment[]>(`${this.applicationService.baseUrl}api/Comments`);\r\n    }\r\n\r\n    saveComment(comment: Comment) {\r\n        return this.http.post(`${this.applicationService.baseUrl}api/Comments`, comment);\r\n\r\n    }\r\n\r\n    modifyComment(comment: Comment) {\r\n        return this.http.put(`${this.applicationService.baseUrl}api/Comments/${comment.id}`, comment);\r\n    }\r\n\r\n    deleteComment(id: number) {\r\n        return this.http.delete<any>(`${this.applicationService.baseUrl}api/Comments/${id}`);\r\n    }\r\n}\r\n"],"sourceRoot":"webpack:///"}